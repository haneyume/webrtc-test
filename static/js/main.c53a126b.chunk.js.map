{"version":3,"sources":["utils/sockets.js","pages/P1.js","pages/P2.js","pages/WebRTCView.js","index.js"],"names":["socket","io","React","Component","faceapi","window","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initialize","asyncToGenerator","regenerator_default","a","mark","_callee","mediaConstraints","pcConfiguration","stream","wrap","_context","prev","next","on","data","receiveData","JSON","parse","audio","video","iceServers","urls","navigator","mediaDevices","getUserMedia","sent","localVideo","current","srcObject","pc","RTCPeerConnection","addStream","onicecandidate","event","candidate","sendData","onaddstream","remoteVideo","oniceconnectionstatechange","console","log","iceConnectionState","stop","uninitialize","_callee2","_context2","off","_callee3","offer","_context3","createOffer","setLocalDescription","hangup","_callee4","_context4","close","_ref5","_callee5","_context5","emit","stringify","_x","apply","arguments","_ref6","_callee6","answer","_context6","undefined","addIceCandidate","setRemoteDescription","createAnswer","_x2","createRef","react_default","createElement","Container","Row","Button","color","onClick","ref","width","autoPlay","muted","ReactDOM","render","WebRTCView_default","document","getElementById"],"mappings":"gQAEMA,QAASC,GAAG,6CCCWC,IAAMC,iCCC7BC,EAAUC,OAAOD,WAEMF,IAAMC,sBCCjC,SAAAG,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA+BRQ,WAhCmBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAgCN,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACX3B,EAAO4B,GAAG,SAAU,SAACC,GAAD,OAAUrB,EAAKsB,YAAYC,KAAKC,MAAMH,MAEpDR,EAAmB,CACvBY,OAAS,EACTC,OAAS,GAGLZ,EAAkB,CACtBa,WAAc,CACZ,CAAEC,KAAQ,kCAVHX,EAAAE,KAAA,EAcUU,UAAUC,aAAaC,aAAalB,GAd9C,OAcLE,EAdKE,EAAAe,KAgBXhC,EAAKiC,WAAWC,QAAQC,UAAYpB,EAEpCf,EAAKoC,GAAK,IAAIC,kBAAkBvB,GAEhCd,EAAKoC,GAAGE,UAAUvB,GAElBf,EAAKoC,GAAGG,eAAiB,SAACC,GACpBA,EAAMC,WACRzC,EAAK0C,SAASF,EAAMC,YAIxBzC,EAAKoC,GAAGO,YAAc,SAACH,GACrBxC,EAAK4C,YAAYV,QAAQC,UAAYK,EAAMzB,QAG7Cf,EAAKoC,GAAGS,2BAA6B,WACnCC,QAAQC,IAAI/C,EAAKoC,GAAKpC,EAAKoC,GAAGY,mBAAqB,QAjC1C,yBAAA/B,EAAAgC,SAAArC,MAhCMZ,EAqEnBkD,aArEmBjD,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAqEJ,SAAAwC,IAAA,OAAA1C,EAAAC,EAAAM,KAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,OACb3B,EAAO6D,IAAI,UADE,wBAAAD,EAAAH,SAAAE,MArEInD,EAyEnBM,KAzEmBL,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAyEZ,SAAA2C,IAAA,IAAAC,EAAA,OAAA9C,EAAAC,EAAAM,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACenB,EAAKoC,GAAGqB,cADvB,cACCF,EADDC,EAAAxB,KAAAwB,EAAArC,KAAA,EAGCnB,EAAKoC,GAAGsB,oBAAoBH,GAH7B,OAKLvD,EAAK0C,SAASa,GALT,wBAAAC,EAAAP,SAAAK,MAzEYtD,EAiFnB2D,OAjFmB1D,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAiFV,SAAAiD,IAAA,OAAAnD,EAAAC,EAAAM,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,OACPnB,EAAKoC,GAAG0B,QACR9D,EAAKoC,GAAK,KAEVpC,EAAKO,aAJE,wBAAAsD,EAAAZ,SAAAW,MAjFU5D,EAwFnB0C,SAxFmB,eAAAqB,EAAA9D,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAwFR,SAAAqD,EAAO3C,GAAP,OAAAZ,EAAAC,EAAAM,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,OACT3B,EAAO0E,KAAK,SAAU3C,KAAK4C,UAAU9C,IAD5B,wBAAA4C,EAAAhB,SAAAe,MAxFQ,gBAAAI,GAAA,OAAAL,EAAAM,MAAAlE,KAAAmE,YAAA,GAAAtE,EA4FnBsB,YA5FmB,eAAAiD,EAAAtE,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KA4FL,SAAA6D,EAAOnD,GAAP,IAAAoD,EAAA,OAAAhE,EAAAC,EAAAM,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,eACSwD,IAAjBtD,EAAI,KADI,CAAAqD,EAAAvD,KAAA,eAAAuD,EAAAvD,KAAA,EAEJnB,EAAKoC,GAAGwC,gBAAgBvD,GAFpB,OAAAqD,EAAAvD,KAAA,mBAIc,UAAjBE,EAAI,KAJD,CAAAqD,EAAAvD,KAAA,gBAAAuD,EAAAvD,KAAA,EAKJnB,EAAKoC,GAAGyC,qBAAqBxD,GALzB,cAAAqD,EAAAvD,KAAA,GAOWnB,EAAKoC,GAAG0C,eAPnB,eAOJL,EAPIC,EAAA1C,KAAA0C,EAAAvD,KAAA,GASJnB,EAAKoC,GAAGsB,oBAAoBe,GATxB,QAWVzE,EAAK0C,SAAS+B,GAXJC,EAAAvD,KAAA,oBAac,WAAjBE,EAAI,KAbD,CAAAqD,EAAAvD,KAAA,gBAAAuD,EAAAvD,KAAA,GAcJnB,EAAKoC,GAAGyC,qBAAqBxD,GAdzB,yBAAAqD,EAAAzB,SAAAuB,MA5FK,gBAAAO,GAAA,OAAAR,EAAAF,MAAAlE,KAAAmE,YAAA,GAGjBtE,EAAKiC,WAAavC,IAAMsF,YACxBhF,EAAK4C,YAAclD,IAAMsF,YACzBhF,EAAKoC,GAAK,KALOpC,mFASjBG,KAAKI,4DAILJ,KAAK+C,gDAIL,OACE+B,EAAAvE,EAAAwE,cAACC,EAAA,EAAD,KACEF,EAAAvE,EAAAwE,cAACE,EAAA,EAAD,KACEH,EAAAvE,EAAAwE,cAACG,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASpF,KAAKG,MAAtC,QACA2E,EAAAvE,EAAAwE,cAACG,EAAA,EAAD,CAAQC,MAAM,SAASC,QAASpF,KAAKwD,QAArC,WAGFsB,EAAAvE,EAAAwE,cAACE,EAAA,EAAD,KACEH,EAAAvE,EAAAwE,cAAA,SAAOM,IAAKrF,KAAK8B,WAAYwD,MAAM,MAAMC,UAAQ,EAACC,OAAK,IACvDV,EAAAvE,EAAAwE,cAAA,SAAOM,IAAKrF,KAAKyC,YAAa6C,MAAM,MAAMC,UAAQ,aA3B/BhG,IAAMC,kBCsBnCiG,IAASC,OAAOZ,EAAAvE,EAAAwE,cAJJ,WACV,OAAOD,EAAAvE,EAAAwE,cAACY,EAAD,OAGO,MAASC,SAASC,eAAe","file":"static/js/main.c53a126b.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\nconst socket = io('https://vvk954yznl.sse.codesandbox.io/');\r\n\r\nexport { socket };\r\n","import React from 'react';\r\nimport { socket } from '../utils/sockets';\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.localVideo = React.createRef();\r\n    this.pc = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initialize();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.uninitialize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <video ref={this.localVideo} width='320' height='240' autoPlay muted />\r\n    );\r\n  }\r\n\r\n  initialize = async () => {\r\n    socket.on('webrtc', (data) => this.receiveData(JSON.parse(data)));\r\n\r\n    const mediaConstraints = {\r\n      'audio': false,\r\n      'video': {\r\n        'width': 640,\r\n        'height': 480\r\n      }\r\n    };\r\n\r\n    const pcConfiguration = {\r\n      'iceServers': [\r\n        { 'urls': 'stun:stun.l.google.com:19302' }\r\n      ]\r\n    };\r\n\r\n    const stream = await navigator.mediaDevices.getUserMedia(mediaConstraints);\r\n\r\n    this.localVideo.current.srcObject = stream;\r\n\r\n    this.pc = new RTCPeerConnection(pcConfiguration);\r\n\r\n    this.pc.addStream(stream);\r\n\r\n    this.pc.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        this.sendData(event.candidate);\r\n      }\r\n    };\r\n\r\n    this.pc.onaddstream = (event) => {\r\n      console.log(event.stream);\r\n    };\r\n\r\n    this.pc.oniceconnectionstatechange = () => {\r\n      console.log(this.pc ? this.pc.iceConnectionState : '...');\r\n    };\r\n  };\r\n\r\n  uninitialize = async () => {\r\n    socket.off('webrtc');\r\n  };\r\n\r\n  sendData = async (data) => {\r\n    socket.emit('webrtc', JSON.stringify(data));\r\n  };\r\n\r\n  receiveData = async (data) => {\r\n    if (data['type'] === undefined) {\r\n      await this.pc.addIceCandidate(data);\r\n    }\r\n    else if (data['type'] === 'offer') {\r\n      await this.pc.setRemoteDescription(data);\r\n\r\n      const answer = await this.pc.createAnswer();\r\n\r\n      await this.pc.setLocalDescription(answer);\r\n\r\n      this.sendData(answer);\r\n    }\r\n    else if (data['type'] === 'answer') {\r\n      await this.pc.setRemoteDescription(data);\r\n    }\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { Container, Row, Button } from 'reactstrap';\r\nimport { socket } from '../utils/sockets';\r\n\r\nconst faceapi = window.faceapi;\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.localVideo = React.createRef();\r\n    this.remoteVideo = React.createRef();\r\n    this.pc = null;\r\n\r\n    this.canvas = React.createRef();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await Promise.all([\r\n      faceapi.nets.tinyFaceDetector.loadFromUri('/models'),\r\n      faceapi.nets.faceLandmark68Net.loadFromUri('/models'),\r\n      faceapi.nets.faceRecognitionNet.loadFromUri('/models'),\r\n      faceapi.nets.faceExpressionNet.loadFromUri('/models')\r\n    ]);\r\n\r\n    await this.initialize();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.uninitialize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Button color='success' onClick={this.call}>Start</Button>\r\n        </Row>\r\n\r\n        <Row>\r\n          <canvas ref={this.canvas} width='640' height='480' />\r\n        </Row>\r\n\r\n        <video ref={this.localVideo} width='0' height='0' autoPlay muted />\r\n        <video ref={this.remoteVideo} width='0' height='0' autoPlay />\r\n\r\n      </Container >\r\n    );\r\n  }\r\n\r\n  initialize = async () => {\r\n    socket.on('webrtc', (data) => this.receiveData(JSON.parse(data)));\r\n\r\n    const mediaConstraints = {\r\n      'audio': false,\r\n      'video': {\r\n        'width': 640,\r\n        'height': 480\r\n      }\r\n    };\r\n\r\n    const pcConfiguration = {\r\n      'iceServers': [\r\n        { 'urls': 'stun:stun.l.google.com:19302' }\r\n      ]\r\n    };\r\n\r\n    const stream = await navigator.mediaDevices.getUserMedia(mediaConstraints);\r\n\r\n    this.pc = new RTCPeerConnection(pcConfiguration);\r\n\r\n    this.localVideo.current.srcObject = stream;\r\n\r\n    this.pc.addStream(stream);\r\n\r\n    this.pc.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        this.sendData(event.candidate);\r\n      }\r\n    };\r\n\r\n    this.pc.onaddstream = (event) => {\r\n      this.remoteVideo.current.srcObject = event.stream;\r\n\r\n      this.remoteVideo.current.addEventListener('play', this.detectFace());\r\n    };\r\n\r\n    this.pc.oniceconnectionstatechange = () => {\r\n      console.log(this.pc ? this.pc.iceConnectionState : '...');\r\n    };\r\n  };\r\n\r\n  uninitialize = async () => {\r\n    socket.off('webrtc');\r\n  };\r\n\r\n  call = async () => {\r\n    const offer = await this.pc.createOffer();\r\n\r\n    await this.pc.setLocalDescription(offer);\r\n\r\n    this.sendData(offer);\r\n  };\r\n\r\n  sendData = async (data) => {\r\n    socket.emit('webrtc', JSON.stringify(data));\r\n  };\r\n\r\n  receiveData = async (data) => {\r\n    if (data['type'] === undefined) {\r\n      this.pc.addIceCandidate(data);\r\n    }\r\n    else if (data['type'] === 'offer') {\r\n      await this.pc.setRemoteDescription(data);\r\n\r\n      const answer = await this.pc.createAnswer();\r\n\r\n      await this.pc.setLocalDescription(answer);\r\n\r\n      this.sendData(answer);\r\n    }\r\n    else if (data['type'] === 'answer') {\r\n      await this.pc.setRemoteDescription(data);\r\n    }\r\n  };\r\n\r\n  detectFace = async () => {\r\n    const _canvas = this.canvas.current;\r\n    const _video = this.remoteVideo.current;\r\n    const _ctx = _canvas.getContext('2d');\r\n\r\n    const frame = async () => {\r\n      const detections = await faceapi.detectAllFaces(_video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\r\n\r\n      _ctx.clearRect(0, 0, _canvas.width, _canvas.height);\r\n      _ctx.drawImage(_video, 0, 0, _canvas.width, _canvas.height);\r\n\r\n      faceapi.draw.drawDetections(_canvas, detections);\r\n      faceapi.draw.drawFaceLandmarks(_canvas, detections);\r\n      faceapi.draw.drawFaceExpressions(_canvas, detections);\r\n    };\r\n\r\n    setInterval(frame, 100);\r\n  };\r\n}\r\n","import React from 'react';\nimport { Container, Row, Button } from 'reactstrap';\nimport { socket } from '../utils/sockets';\n\n//\"homepage\": \"https://nenzon-dev.github.io/webrtc-test\"\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.localVideo = React.createRef();\n    this.remoteVideo = React.createRef();\n    this.pc = null;\n  }\n\n  componentDidMount() {\n    this.initialize();\n  }\n\n  componentWillUnmount() {\n    this.uninitialize();\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Button color='success' onClick={this.call}>Call</Button>\n          <Button color='danger' onClick={this.hangup}>Hangup</Button>\n        </Row>\n\n        <Row>\n          <video ref={this.localVideo} width='300' autoPlay muted />\n          <video ref={this.remoteVideo} width='300' autoPlay />\n        </Row>\n      </Container >\n    );\n  }\n\n  initialize = async () => {\n    socket.on('webrtc', (data) => this.receiveData(JSON.parse(data)));\n\n    const mediaConstraints = {\n      'audio': true,\n      'video': true\n    };\n\n    const pcConfiguration = {\n      'iceServers': [\n        { 'urls': 'stun:stun.l.google.com:19302' }\n      ]\n    };\n\n    const stream = await navigator.mediaDevices.getUserMedia(mediaConstraints);\n\n    this.localVideo.current.srcObject = stream;\n\n    this.pc = new RTCPeerConnection(pcConfiguration);\n\n    this.pc.addStream(stream);\n\n    this.pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        this.sendData(event.candidate);\n      }\n    };\n\n    this.pc.onaddstream = (event) => {\n      this.remoteVideo.current.srcObject = event.stream;\n    };\n\n    this.pc.oniceconnectionstatechange = () => {\n      console.log(this.pc ? this.pc.iceConnectionState : '...');\n    };\n  };\n\n  uninitialize = async () => {\n    socket.off('webrtc');\n  };\n\n  call = async () => {\n    const offer = await this.pc.createOffer();\n\n    await this.pc.setLocalDescription(offer);\n\n    this.sendData(offer);\n  };\n\n  hangup = async () => {\n    this.pc.close();\n    this.pc = null;\n\n    this.initialize();\n  };\n\n  sendData = async (data) => {\n    socket.emit('webrtc', JSON.stringify(data));\n  };\n\n  receiveData = async (data) => {\n    if (data['type'] === undefined) {\n      await this.pc.addIceCandidate(data);\n    }\n    else if (data['type'] === 'offer') {\n      await this.pc.setRemoteDescription(data);\n\n      const answer = await this.pc.createAnswer();\n\n      await this.pc.setLocalDescription(answer);\n\n      this.sendData(answer);\n    }\n    else if (data['type'] === 'answer') {\n      await this.pc.setRemoteDescription(data);\n    }\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport P1 from './pages/P1';\nimport P2 from './pages/P2';\nimport WebRTCView from './pages/WebRTCView';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*const App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path='/' exact component={Home} />\n        <Route path='/p1' component={P1} />\n        <Route path='/p2' component={P2} />\n        <Route path='/webrtc' component={WebRTCView} />\n      </Switch>\n    </BrowserRouter>\n  );\n};*/\n\nconst App = () => {\n  return <WebRTCView />\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}